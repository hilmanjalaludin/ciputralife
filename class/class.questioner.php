<?phprequire(dirname(__FILE__)."/../sisipan/sessions.php");require(dirname(__FILE__)."/../fungsi/global.php");require(dirname(__FILE__)."/../class/MYSQLConnect.php");require(dirname(__FILE__)."/../class/class.application.php");require(dirname(__FILE__)."/../sisipan/parameters.php");if(!define('EX_QUESTION',3)) define('EX_QUESTION',3);	if(!define('EX_ANSWER',4)) define('EX_ANSWER',4);/* * @ def 		: class AXA_Edit  * @ params 	: all request by customizde  * @ return 	: void  */ class questioner_act extends mysql{/* * @ def 		: AXA_Edit / constructor   * @ params 	: all request by customizde  * @ return 	: void  */private static $InsuredId = null;/* * @ def 		: AXA_Edit / constructor   * @ params 	: all request by customizde  * @ return 	: void  */ private static $action = null;/* * @ def 		: AXA_Edit / constructor   * @ params 	: all request by customizde  * @ return 	: void  */private static $ProductId = null;/* * @ def 		: AXA_Edit / constructor   * @ params 	: all request by customizde  * @ return 	: void  */ var $_url; var $_tem;		function questioner_act(){	parent::__construct();	$this -> _url  =& application::get_instance(); /// Application();	$this -> _tem  =& Themes::get_instance();  // Themes		if( $this -> havepost('action') )	{		self::$action = trim($this -> escPost('action'));		// self::$InsuredId = trim($this -> escPost('InsuredId'));		// self::$ProductId = trim($this -> escPost('ProductId'));	}		self::index();}		/* * @ def 		: AXA_Edit / constructor   * @ params 	: all request by customizde  * @ return 	: void  */ 		function index(){	if(!is_null(self::$action) )	{		switch(self::$action) 		{			case '_get_tag_question'	: self::_get_tag_question(); break;			case '_get_tag_answer'		: self::_get_tag_answer(); break;			case '_save_questioner'		: self::_save_questioner(); break;			case 'get_active_product'	: self::get_product();break;			case 'enable_questioner'	: self::enable_questioner();break;			case 'disable_questioner'	: self::disable_questioner();break;			case '_get_type_input'		: self::_get_type_input();break;			case 'preview_questioner'	: self::_preview_questioner();break;			case '_get_exception_ans'		: self::_get_exception_ans();break;			case '_get_first_except'		: self::_get_first_except();break;			case '_get_question_except'		: self::_get_question_except();break;		}	}	}private function questioner_by_product( $product="0",$type="0" ){	$data=array();	$sql = "SELECT a.prod_survey_id,c.survey_quest_id,c.survey_question, d.ans_label,e.type_survey			FROM t_gn_questioner quest 			INNER JOIN t_gn_prod_survey a ON quest.questioner_id = a.questioner_id			INNER JOIN t_lk_survey b ON a.survey_id=b.survey_id			INNER JOIN t_lk_question_survey c ON b.survey_quest_id=c.survey_quest_id			INNER JOIN t_lk_type_ans_survey d ON b.type_ans_id = d.type_ans_id			INNER JOIN t_lk_type_survey e ON d.type_survey_id=e.type_survey_id			WHERE quest.product_id = ".$product."			AND quest.questioner_type = ".$type."			ORDER BY c.survey_quest_order,d.ans_order ASC";				$qry  = $this -> query($sql);	foreach($qry -> result_assoc() as $rows ) 	{				$data['question'][$rows['survey_quest_id']]= $rows['survey_question'];		$data['answer_label'][$rows['survey_quest_id']][$rows['prod_survey_id']]= $rows['ans_label'];		$data['setup_answer'][$rows['survey_quest_id']]= $rows['type_survey'];	}	return $data;}public function _generate_questioner($keyid=0,$generate='ByProduct',$type="0",$customer=null){	$Questioner="";		if($generate=='ByProduct')	{		$product = $keyid;		$survey_data = $this->questioner_by_product($product,$type);		$question = $survey_data['question'];		$answer_label = $survey_data['answer_label'];		$setup_answer = $survey_data['setup_answer'];		// $answer_survey = $this->_get_ans_survey();				foreach($setup_answer as $index => $setup_decs)		{			if($setup_decs =="checkbox")			{				// $setup[$index] = $this->DBForm->RTListcombo( 'survey_'.$index ,'CheckAll',$answer_label[$index],array_keys($answer_survey[$index]) );				$setup[$index] = $this->DBForm->RTListcombo( 'survey_'.$index ,'CheckAll',$answer_label[$index] );			}			elseif($setup_decs=="combobox")			{				// $cmb_select = "";				// if(is_array($answer_survey[$index]) && (count($answer_survey[$index]) > 0) )				// {					// foreach($answer_survey[$index] as $prod_sur_id => $cmb_ans)					// {						// if( ($cmb_ans !="") )						// {							// $cmb_select = $prod_sur_id;						// }					// }				// }				// $setup[$index] = $this->DBForm->RTCombo('survey_'.$index ,'select long', $answer_label[$index] ,$cmb_select);				$setup[$index] = $this->DBForm->RTCombo('survey_'.$index ,'select long', $answer_label[$index] );			}			elseif($setup_decs=="radiobutton")			{				$setup[$index] = $this->DBForm->RTRadio( 'survey_'.$index ,'', $answer_label[$index] );			}			elseif($setup_decs=="textbox")			{				// RTInput($name="",$css="",$value="",$label,$js="",$true=false,$maxLength=0)				if(is_array($answer_survey[$index]) )				{					$setup[$index] = $this->DBForm->RTInput('survey_'.$index ,'input long',$answer_survey[$index],$answer_label[$index]);				}				else				{					$setup[$index] = $this->DBForm->RTInput('survey_'.$index ,'input long',array(),$answer_label[$index]);				}			}		}				$no=1;		$Questioner = "<table width=\"100%\" border=\"1px\" cellspacing=\"1px\" cellpadding=\"6px\">";		foreach ($question as $idx=>$qst)		{			$Questioner .= "<tr >					<td rowspan=\"2\" align=\"center\">$no</td>					<td >{$qst}</td>				  </tr>				  <tr>					<td ><div id=\"ans_valid_{$idx}\">{$setup[$idx]}</div></td>				  </tr>";			$no++;		}		$Questioner .= "</table>";	}	return $Questioner;}private function _preview_questioner(){	if( $this->havepost('quest') )	{		$QuestionerId = $this->escPost('quest');		$entity_quest = $this->get_atribute_quest($QuestionerId);		if ( !empty( $entity_quest['product_id'] ) )		{			$this->head();			echo "<body leftmargin=\"0\" topmargin=\"0\" marginwidth=\"0\" marginheight=\"0\">						<div id=\"container_question\" style=\"height:500px;overflow:auto;\">							<fieldset class=\"corner\" >								<legend class=\"icon-customers\">&nbsp;&nbsp;&nbsp;<b>Questioner</b></legend>									". $this->_generate_questioner($entity_quest['product_id'],'ByProduct',$entity_quest['questioner_type'] ) ." 							</fieldset>						</div>					</body>					</html>";		}	}}function head(){	?>		<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">		<html xmlns="http://www.w3.org/1999/xhtml">		<head>		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1" />		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">		<meta content="utf-8" http-equiv="encoding">		<title>Questioner</title>		<link type="text/css" rel="stylesheet" href="<?php echo $this -> _url -> basePath();?>gaya/policy.screen.css?time=<?php echo time();?>" />		<link type="text/css" rel="stylesheet" href="<?php echo $this -> _url -> basePath();?>pustaka/jquery/jquery-ui-themes-1.7.2/themes/<?php echo $this -> _tem -> V_UI_THEMES;?>/ui.all.css?time=<?php echo time();?>" />			<script type="text/javascript" src="<?php echo $this -> _url -> basePath();?>pustaka/jquery/jquery-1.3.2.js?time=<?php echo time();?>"></script>    		<script type="text/javascript" src="<?php echo $this -> _url -> basePath();?>pustaka/jquery/jquery-ui-1.7.2/ui/jquery-ui.js?time=<?php echo time();?>"></script>		<script type="text/javascript" src="<?php echo $this -> _url -> basePath();?>pustaka/jquery/jquery-ui-1.7.2/external/bgiframe/jquery.bgiframe.js?time=<?php echo time();?>"></script>		<script type="text/javascript" src="<?php echo $this -> _url -> basePath();?>js/EUI_1.0.2.js?time=<?php echo time();?>"></script>		<script type="text/javascript" src="<?php echo $this -> _url -> basePath();?>js/Ext.Questioner_dep.js?time=<?php echo time();?>"></script>		</head>			<?php}private function _get_type_input(){	$data = array();	$sql ="SELECT a.type_survey_id FROM t_lk_type_survey a WHERE a.input_questioner_flag = 1 AND a.type_from_user = 1";	$qry = $this -> query($sql);	foreach( $qry -> result_assoc() as $rows ) {		$data[$rows['type_survey_id']]= $rows['type_survey_id'];	}		echo json_encode($data);}private function disable_questioner(){	$_callback = array('status'=>0);	if( $this->havepost('quest') )	{		$QuestionerId = $this->escPost('quest');		if( $this -> set_mysql_update('t_gn_questioner', 							array('questioner_flag' => (INT) 0							),							array('questioner_id'=>$QuestionerId) ) )		{			$_callback = array('status'=>1);		}		else		{			$_callback = array('status'=>0 );		}	}	echo json_encode($_callback);}private function enable_questioner(){	$_callback = array('status'=>0,'msg'=>'Please Select Questioner' );	if( $this->havepost('quest') )	{		$QuestionerId = $this->escPost('quest');		$entity_quest = $this->get_atribute_quest($QuestionerId);		// print_r($entity_quest);		// echo var_dump(empty( $entity_quest['product_id'] ) );		if ( !empty( $entity_quest['product_id'] ) )		{			$questioner_type = $this->get_questioner_type();			$sql = "SELECT COUNT(*) AS avail_product FROM t_gn_questioner a WHERE a.product_id = ".$entity_quest['product_id']." 					AND a.questioner_type = ". $entity_quest['questioner_type'] ."					AND a.questioner_id <> ". $QuestionerId. " 					AND a.questioner_flag = 1";			$qry = $this -> query($sql);			$available = $qry -> result_singgle_value();						if($available=="0")			{				if( $this -> set_mysql_update('t_gn_questioner', 							array('questioner_flag' => (INT) 1							),							array('questioner_id'=>$QuestionerId) ) )				{					$_callback = array('status'=>1,'msg'=>'Success Update '.$questioner_type[$entity_quest['questioner_type']] );				}				else				{					$_callback = array('status'=>0,'msg'=>'Failed Update '.$questioner_type[$entity_quest['questioner_type']] );				}			}			else 			{				$_callback = array('status'=>0,				'msg'=> 'This Product have '.$questioner_type[$entity_quest['questioner_type']].', please disable first !!'				);			}		}			}		echo json_encode($_callback);}private function get_questioner_type(){	$sql = "SELECT a.quest_type_id,a.quest_type_desc FROM t_lk_questioner_type a WHERE a.quest_flag = 1";	$qry = $this -> query($sql);	foreach( $qry -> result_assoc() as $rows ) {		$data[$rows['quest_type_id']]= $rows['quest_type_desc'];	}	return $data;}private function get_atribute_quest($QuestionerId="0"){		$data = array();	$sql ="SELECT * FROM t_gn_questioner a WHERE a.questioner_id = ".$QuestionerId;	$qry = $this -> query($sql);		$data = $qry -> result_first_assoc();		return $data;}function get_product(){	$data = array();	$sql = "	SELECT a.ProductId,a.ProductName FROM t_gn_product a 				LEFT JOIN t_gn_questioner b ON a.ProductId = b.product_id				WHERE a.ProductStatusFlag = 1";	$qry = $this -> query($sql);	foreach( $qry -> result_assoc() as $rows ) {		$data[$rows['ProductId']]= $rows['ProductName'];	}		echo json_encode($data);}function _save_questioner(){	$return_client = array('status'=>'0');	//--- check mandatory post	if( $this->havepost('count_pertanyaan') && $this->havepost('ProductId') && $this->havepost('QuestType') )	{		/**** 		----- Get All Post		****/		$question = array();		$question_id = array();		$answer = array();		$rule = array();		$exception_answer = array();		$ex_ans_id = array();				(INT)$max_question = $this->escPost('count_pertanyaan');		$productid = $this->escPost('ProductId');		$questtype = $this->escPost('QuestType');		$questdesc = $this->escPost('QuestionDecs');				//--- check mandatory question		$madatory = array();		if( $this->havepost('qst_madatory') )		{			$madatory = explode( ',',$this->escPost('qst_madatory') );		}				for ($i=1;$i<=$max_question;$i++)		{			$question[$i]['question'] = $this->escPost('question_'.$i);			$question[$i]['type_ans'] = $this->escPost('Type_answer_'.$i);			if( in_array($i,$madatory) )			{				$question[$i]['madatory'] = (INT) 1;			}			else			{				$question[$i]['madatory'] = (INT) 0;			}			(INT)$max_quest_ans = $this->escPost('incr_jwb_'.$i);			// echo 'question_'.$i.'<br />';			// echo 'incr_jwb_'.$i.'<br />';			// echo 'Type_answer_'.$i.'<br />';						for( $j=1;$j<=$max_quest_ans;$j++ )			{				// echo "answer_".$i."_".$j."<br />";				$answer[$i][$j] = $this->escPost('answer_'.$i.'_'.$j);				$rule[$i][$j] = $this->escPost('rule_answer_'.$i.'_'.$j);				if ($this->escPost('rule_answer_'.$i.'_'.$j) ==EX_ANSWER)				{					$exception_answer['type_ans'][$i][$j] = $this->escPost('ex_type_ans_'.$i.'_'.$j);					for($k=1;$k<=$this->escPost('except_count_'.$i.'_'.$j);$k++)					{						$exception_answer['ex_ans'][$i][$j][$k] = $this->escPost('ex_ans_'.$i.'_'.$j.'_'.$k);						$exception_answer['ex_rule'][$i][$j][$k] = $this->escPost('ex_rule_'.$i.'_'.$j.'_'.$k);						// $ex_ans[$i][$j][$k] = $this->escPost('ex_ans_'.$i.'_'.$j.'_'.$k);					}					 				}				else if($this->escPost('rule_answer_'.$i.'_'.$j) ==EX_QUESTION)				{					$exception_question[$i][$j] = $this->escPost('ex_question_'.$i.'_'.$j);				}			}		}				/*** Save input now [SAll] ***/				/** varibale questioner untuk survey **/		$questioner = array();		$no_questioner = 0;		$success=0;		/***		---- save questioner entity [S1]		---- get last insert id		***/		$entity_quest = 0;		$_conds_entity = $this -> set_mysql_insert( 't_gn_questioner', array(											'product_id'=>$productid,											'questioner_type'=>$questtype,											'questioner_desc'=>$questdesc,											'questioner_flag'=> (int) 0,											'questioner_createts'=> date('Y-m-d H:i:s')											));		if( $_conds_entity )		{			$entity_quest = $this -> get_insert_id();					/** End Of [S1] ***/					foreach( $question as $order_quest => $array_value )			{				/***				---- save question [S2]				---- get last insert id				***/				$quest_id = 0;				$insert_question = array(				'survey_question'=>$array_value['question'],				'survey_quest_order'=>$order_quest,				'question_mandatory'=>$array_value['madatory']				);												$_conds = $this -> set_mysql_insert( 't_lk_question_survey', $insert_question );								if( $_conds )				{					$quest_id = $this -> get_insert_id();					$question_id['question_'.$order_quest]= $quest_id;									/** End Of [S2] ***/									foreach( $answer[$order_quest] as $order_ans => $val_ans )					{								/***				---- save answer [S3]				---- get last insert id				***/						$insert_lbl = array(						'type_survey_id'=>$array_value['type_ans'],						'ans_label'=>$val_ans,						'ans_rule_id'=>$rule[$order_quest][$order_ans],						'ans_order'=>$order_ans						);						$ans_id = 0;																	$_conds_ans = $this -> set_mysql_insert('t_lk_type_ans_survey', $insert_lbl);						if( $_conds_ans )						{							$ans_id = $this -> get_insert_id();							if($rule[$order_quest][$order_ans] ==EX_ANSWER)							{								foreach($exception_answer['ex_ans'][$order_quest][$order_ans] as $order_exc=>$exc_lbl)								{									$this -> set_mysql_insert('t_lk_type_ans_survey',array(									'type_survey_id'=>$exception_answer['type_ans'][$order_quest][$order_ans],									'ans_label'=>$exc_lbl,									'ans_rule_id'=>$exception_answer['ex_rule'][$order_quest][$order_ans][$order_exc],									'ans_exeption_ans'=>$ans_id,									'ans_order'=>$order_exc									));								}															}							else if($rule[$order_quest][$order_ans]==EX_QUESTION)							{								$ex_ans_id[$order_quest][$order_ans] = $ans_id; 															}							$questioner[$no_questioner]['survey_quest_id']= $quest_id;							$questioner[$no_questioner]['type_ans_id']= $ans_id;														$no_questioner++;						}				/** End Of [S3] ***/					}				}			}			/***			---- save answer [S4]			---- get last insert id			***/			$surveyid=0;			if( count($questioner) > 0 )			{				foreach( $questioner as $index => $array_survey )				{					if( $this -> set_mysql_insert('t_lk_survey', $array_survey ) )					{						$surveyid = $this -> get_insert_id();												if( $this -> set_mysql_insert('t_gn_prod_survey', array(							'questioner_id'=> $entity_quest,							// 'product_id'=> $productid,							'survey_id'=> $surveyid						) ) )						{							$success++;						}					}				}			}			/** End Of [S4] ***/		}						/** End Of [SAll] **/						// echo "<pre>";		// print_r($question);		// echo "</pre>";		// echo "<pre>";		// print_r($answer);		// echo "</pre>";		// echo "<pre>";		// print_r($questioner);		// echo "</pre>";			}	//--- END OF check mandatory post		if($success >0)	{		$return_client = array('status'=>'1');	}	echo json_encode($return_client);}function get_type_answer(){	$data = array();	$sql = "SELECT a.type_survey_id,a.type_survey FROM t_lk_type_survey a WHERE a.input_questioner_flag =1";	$qry = $this -> query($sql);	foreach( $qry -> result_assoc() as $rows ) {		$data[$rows['type_survey_id']]= $rows['type_survey'];	}		return $data;}private function get_rule_answer(){	$data = array();	$sql = "SELECT * FROM t_lk_answer_rule a WHERE a.ans_rule_flag = 1";	$qry = $this -> query($sql);	foreach( $qry -> result_assoc() as $rows ) {		$data[$rows['ans_rule_id']]= $rows['ans_rule_name'];	}		return $data;}private function get_not_ex_ans(){	$data = array();	$sql = "SELECT * FROM t_lk_answer_rule a WHERE a.ans_rule_flag = 1 AND a.ans_exception= 0";	$qry = $this -> query($sql);	foreach( $qry -> result_assoc() as $rows ) {		$data[$rows['ans_rule_id']]= $rows['ans_rule_name'];	}		return $data;}private function _get_tag_question(){	// $conds=array(0=>"Kosong");	 // RTInput($name="txtFrm",$css="",$value="",$label=array(),$js="",$true=false,$maxLength=100)($name="",$lbl="", $value="",$js="",$attr=false, $dis=0)	$form="<fieldset class=\"corner\" >				<legend class=\"icon-customers\">&nbsp;&nbsp;&nbsp;<b>Question REPLACENOQUESTION</b></legend>						<table border=\"0\" cellpadding=\"3px\">					<tr>						<td>							<table border=\"0\" cellpadding=\"3px\">									<tr>									<td colspan =\"2\"><input type=\"hidden\" id=\"incr_jwb_REPLACENOQUESTION\" name=\"incr_jwb_REPLACENOQUESTION\" value=\"0\"></td>									<td colspan =\"2\"><input type=\"hidden\" id=\"except_bool_REPLACENOQUESTION\" name=\"except_bool_REPLACENOQUESTION\" value=\"NO\"></td>								</tr>								<tr>									<td class=\"question_table\">Question</td>									<td>".$this -> DBForm -> RTInput('question_REPLACENOQUESTION','input long','','','','',300)."</td>									<td colspan =\"2\">".$this -> DBForm -> jpResulCheck('qst_madatory','','REPLACENOQUESTION','onclick="Ext.DOM.change(this)"',TRUE)."<label for=\"qst_madatory\" name=\"lbl_madatory_REPLACENOQUESTION\" id=\"lbl_madatory_REPLACENOQUESTION\">Mandatory</label></td>								</tr>								<tr>									<td class=\"question_table\">Type answer</td>									<td colspan =\"3\">". $this -> DBForm -> RTCombo('Type_answer_REPLACENOQUESTION','select long', $this->get_type_answer() )."</td>								</tr>								<tr>									<td class=\"question_table\">Answer Label</td>									<td class=\"question_table\">										<ol id=\"jawaban_REPLACENOQUESTION\">											<li>".$this -> DBForm -> RTInput('answer_REPLACENOQUESTION_REPLACENOANSWER','input long','','','','',200)."</li>										</ol>									</td>									<td class=\"question_table\">Rule</td>									<td class=\"question_table\"> 									<ol id=\"rule_REPLACENOQUESTION\">											<li>".$this -> DBForm -> RTCombo('rule_answer_REPLACENOQUESTION_REPLACENOANSWER','select long', $this->get_rule_answer(),'5','onchange="Ext.DOM.CheckRule(REPLACENOQUESTION,REPLACENOANSWER)"' )."</li>										</ol>									</td>								</tr>								<tr>									<td colspan =\"4\" align=\"right\">										<button type=\"button\" onclick=\"Ext.DOM.AddAnswer(REPLACENOQUESTION);\">Add Label</button>									</td>								</tr>							</table>						</td>						<td><div id=\"excep_REPLACENOQUESTION\">Exception</div></td>					</tr>					</table>								</fieldset>";	$conds=array('question'=>$form);		echo json_encode($conds);}private function _get_tag_answer(){	echo json_encode( array(					'answer'=> $this -> DBForm -> RTInput('answer_REPLACENOQUESTION_REPLACENOANSWER','input long','','','','',200),					'rule'=> $this -> DBForm -> RTCombo('rule_answer_REPLACENOQUESTION_REPLACENOANSWER','select long', $this->get_rule_answer(),'5','onchange="Ext.DOM.CheckRule(REPLACENOQUESTION,REPLACENOANSWER)"' )					));}private function _get_exception_ans(){	echo json_encode(array('ex_answer'=> $this -> DBForm -> RTInput('ex_ans_REPLACENOQUESTION_REPLACENOANSWER_REPLACENOEXCEPT','input long','','','','',200),						   'ex_rule'=> $this -> DBForm -> RTCombo('ex_rule_REPLACENOQUESTION_REPLACENOANSWER_REPLACENOEXCEPT','select long', $this->get_not_ex_ans(),'5' )					));}private function _get_first_except(){		if($this->havepost('no_question') && $this->havepost('no_jawaban'))	{		$no_question = $this->escPost('no_question');		$no_jawaban = $this->escPost('no_jawaban');				echo "<table border=\"1\" cellpadding=\"3px\">			<tr>				<td colspan =\"4\"><input type=\"hidden\" id=\"except_count_".$no_question."_".$no_jawaban."\" name=\"except_count_".$no_question."_".$no_jawaban."\" value=\"1\"></td>			</tr>			<tr>				<td colspan =\"4\" class=\"question_table\">Allowed one Exception (Rule ".$no_jawaban.")</td>			</tr>			<tr>				<td class=\"question_table\">Type answer</td>				<td colspan =\"3\">". $this -> DBForm -> RTCombo('ex_type_ans_'.$no_question.'_'.$no_jawaban,'select long', $this->get_type_answer() )."</td>			</tr>			<tr>				<td class=\"question_table\">Answer Label</td>				<td class=\"question_table\">					<ol id=\"ex_jwb_$no_question\">						<li>".$this -> DBForm -> RTInput('ex_ans_'.$no_question.'_'.$no_jawaban.'_1','input long','','','','',200)."</li>					</ol>				</td>				<td class=\"question_table\">Rule</td>				<td class=\"question_table\"> 					<ol id=\"ex_rule_$no_question\">						<li>".$this -> DBForm -> RTCombo('ex_rule_'.$no_question.'_'.$no_jawaban.'_1','select long', $this->get_not_ex_ans(),'5')."</li>					</ol>				</td>			</tr>			<tr>				<td colspan =\"4\" align=\"right\">					<button type=\"button\" onclick=\"Ext.DOM.AddExceptAnswer(".$no_question.",".$no_jawaban.");\">Add Exc. Label</button>				</td>			</tr>		  </table>";	}}private function _get_question_except(){	if($this->havepost('count_question') && $this->havepost('no_jawaban')&& $this->havepost('no_question'))	{		$no_question = $this->escPost('no_question');		$no_jawaban = $this->escPost('no_jawaban');		$max_question = (INT) $this->escPost('count_question');		// echo $max_question;		$question=array();		for ($i=1;$i<=$max_question;$i++)		{			if($i != $no_question)			{				$question['question_'.$i] = 'Question '.$i;			}		}				echo "<table border=\"1\" cellpadding=\"3px\">			<tr>				<td colspan =\"2\" class=\"question_table\">Allowed one Exception</td>			</tr>			<tr>				<td class=\"question_table\">Select Question</td>				<td>".$this -> DBForm -> RTCombo('ex_question_'.$no_question.'_'.$no_jawaban,'select long', $question)."</td>			</tr>			</table>";	}	}	}new questioner_act();?>
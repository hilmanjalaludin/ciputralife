/* * @ JS framewok	: E.U.I ( Enigma User Interface )  *  * @ version		: 1.0.0 * @ revision		: 0.0.3  * @ Licensed		: under the MIT ( http://razakitechnology.com/siteraztech/product/web-application ) license. * @ author			: < razaki team > * @ Copyright		: 2013-2014|http://razakitechnology.com        * @ update function : E_ui.prototype.Serialize.getChecked() * @ update desc : get value checkbox * @ update date : 17-08-2015 * @ update by : fajar   * @ update function : E_ui.prototype.Cmp.getChecked() * @ update desc : get value if radio tag * @ update date : 26-08-2015 * @ update by : fajar  */ var E_ui = function() {};/* set global JS */ E_ui.prototype.DOM = this.self || window;/* version EUI **/ E_ui.prototype.define = {  NAME 		: 'E.U.I Js Libs',  ALIAS		: 'Ext',   VERSION 	: '1.0.3',   AUTHOR 	: 'OMENS',  COPYRIGHT : 'www.razakitechnology.com'}/* @ def 	:  HolderPlanType  * * @ triger : Pecah Policy * @ params : jika terjadi pecah polis */ E_ui.prototype.Cmp = function(names){ return({	getElementId:function(){		var _e = document.getElementById(names);		try{ 			return _e; 		}		catch(e){ Ext.Error({log : e, name : names }); }	},			getName:function(){		var name = document.getElementsByName(names);		return name;	},			type:function(){		try { return this.getElementId().type; }		catch(e){ 			Ext.Error({log : e, name : names }); 		}		},			getValue:function(){		var _eval = this.getElementId();		try{			var _chars = ''						if( this.type() =='select-multiple' ) { _chars = this.getSelectAll(); }			if( this.type() =='text'){ _chars  = _eval.value; }			if( this.type() =='checkbox'){ _chars  = this.getChecked();}			if( this.type() =='radio'){ _chars  = this.getChecked();}			if( this.type() =='select-one'){ _chars  = _eval.value; }			if( this.type() =='textarea'){ _chars  = _eval.value;  }			if( this.type() =='hidden'){ _chars  = _eval.value;  }			if( this.type() =='password'){ _chars  = _eval.value; }			if( this.type() =='file'){ _chars  = _eval.value; }			return _chars;			}		catch(e){			Ext.Error({log : e, name : names });		}	},			getChecked:function(){		try {			var i, _elem, y=0, _check_list = [];			_elem = this.getName();			for( i=0; i< _elem.length; i++){				if( _elem[i].checked ) {					_check_list[y] = _elem[i].value;					y++;				}			}				return _check_list;		 		}		catch(e){			Ext.Error({log : e, name : names });		}	},			Checked:function(){		var _e = this.getElementId();		try{			if( _e.checked ) return 1			else				return 0;		}		catch(e){			Ext.Error({log : e, name : names });		}	},		getSelect:function(){		var i, option, _list_text = [];		try 		{			option = this.getElementId();			for ( i=0; i< option.length; i++ )			{				if( option.options[i].selected){					_list_text[i] = option.options[i].value;				}			}							return _list_text;		}		catch(e){			Ext.Error({log : e, name : names });		}	},		getSelectAll:function(){		var i, option, _list_text = [];		try 		{			option = this.getElementId();			for ( i=0; i< option.length; i++ ) {				if( option.options[i].value!='' ){					_list_text[i] = option.options[i].value;				}			}							return _list_text;		}		catch(e){			Ext.Error({log : e, name : names });		}	},			setFocus:function(){		var _e = this.getElementId();		try{ return _e.focus(); }		catch(e){			Ext.Error({log : e, name : names });		}		},			disabled:function( b ){		var _e = this.getElementId();		try		{			var p = this.type(), e, d = this.getName();			if ( p =='checkbox' || p=='radio'){				for( e =0;  e < d.length; e++){					d[e].disabled = b; 				}				}			else{				_e.disabled = b;			}		}		catch(e){			Ext.Error({log : e, name : names });		}				return;	},			empty:function(){		var _e = this.getValue();			try			{				if( _e==''){ return true; }				else{ return false; }			}			catch(e){				Ext.Error({log : e, name : names });			}		},		setValue:function( s ){		var _e = this.getElementId();		try		{ 			if( this.type()=='select-one') {				var options = _e.options;				for (var i= 0; i < options.length; i++) 				{					if (options[i].value==s ){						_e.options.selectedIndex = i;							break;				    }				}			}			else {				_e.value = s; 			}					}		catch(e){ Ext.Error({log : e, name : names }); }		return;		},			setText:function( s ){		var _e = this.getElementId();		try { _e.innerHTML = s; }		catch(e){			Ext.Error({log : e, name : names });		}	},			getText:function(){		var _e = this.getElementId();		try{ return _e.options[_e.options.selectedIndex].text; }		catch(e){			Ext.Error({log : e, name : names });		}	},			setChecked:function(){		try		{			var i, _elem = this.getName(); 			for( i=0; i < _elem.length; i++ ) {				if( _elem[i].checked ==false ) 					_elem[i].checked = true;				else					_elem[i].checked = false;			}		}		catch(e){			Ext.Error({log : e, name : names });		}	},		setUnchecked:function(){		var i, e = this.getName(); 		for( i=0; i < e.length; i++ ) {			e[i].checked = false;		}	},		setMaxlength:function( n ){		var _e = this.getElementId();		try { _e.maxLength = n; }		catch(e){			Ext.Error({log : e, name : names });		}	},			setIndex:function( n ){		var _e = this.getElementId();		try{ _e.options.selectedIndex = n;  }		catch(e){			Ext.Error({log : e, name : names });		}	},		listener:function( fn ){		var evt = ( this.getElementId()!=null ? this.getElementId() : false );		try 		{			if( evt!=false )			{				for(var _e in fn ) {					if( _e == 'onClick' )  evt.addEventListener("click", fn[_e],true);					if( _e == 'onKeyup' )  evt.addEventListener("keyup", fn[_e],true);					if( _e == 'onChange' ) evt.addEventListener("change",fn[_e],true);				}			}			}		catch(e){			Ext.Error({log : e, name : names });		}	},			Encrypt:function(){		_encript = this.getValue();		if( _encript )		{			try{ return Ext.BASE64.encode(_encript); }			catch(e){ Ext.Error({log : e, name : names }); }		}	},		Decrypt:function(){		_encript = this.Encrypt();		if( _encript )		{			try{ return Ext.BASE64.decode(_encript); }			catch(e){ Ext.Error({log : e, name : names }); }		}	},		getAttribute: function(){		var b = this.getElementId(), a = {			Array : function()			{				var attr = [];				Array.prototype.slice.call( b.attributes ).forEach(function(item) {					attr[item.name] = item.value;				});								return ( attr.length > 0 ? attr : null );			},						Object : function(){				var attr = {};				Array.prototype.slice.call( b.attributes ).forEach(function(item) {					attr[item.name] = item.value;				});								return ( attr ? attr : null );			},						NodeName : function(){				var attr = [], i = 0;				Array.prototype.slice.call( b.attributes ).forEach(function(item) {					attr[i] = item.name;					i++;				});								return ( attr ? attr : null );			},						NodeValue : function( p ){				var attr = [], i = 0;				try{					Array.prototype.slice.call( b.attributes ).forEach(function(item) {						attr[item.name] = item.value;					});					return ( p ? attr[p] : null );				}				catch(e){					Ext.Error({						log  : e,						name :b.attributes.id //this.NodeValue(p),					});				}			}		}				return ( a ? a : null );	},		setAttribute: function( name, value ){		var b = this.getElementId();		try {			if( (name!='') ) {				return ( b ? b.setAttribute(name,value) : null ); 			}		}		catch( e ){			Ext.Error({ log : e, name : this.NodeValue('name') });		}		} });	}; /* @ def 	:  Css  * * @ triger : Pecah Policy * @ params : jika terjadi pecah polis */ E_ui.prototype.Css = function( elem ){ return( {	options :(function(){		return Ext.Cmp(elem).getElementId();		})(),		style:function(attr){		for( i in attr ) 			this.setup( i, attr[i] ); 				},		className : function( className ){		elem = this.options;		elem.className = className; 	},		setup:function( each , set ){		elem = this.options.style;		for( i in elem )			if( each ===i ) elem[i] = set; 	}});};/* @ def 	:  Css  * * @ triger : Pecah Policy * @ params : jika terjadi pecah polis */ E_ui.prototype.Set = function( opts ){	var _ui = opts;	var _Ext = new E_ui();	return({		IsNumber:function(){			var Lstring, Lconstant, Rstring;				Lstring = _Ext.Cmp(opts).getValue().length;				Lconstant = ( (_Ext.Cmp(opts).getValue().length)-1 );				Rstring = _Ext.Cmp(opts).getValue().substring(Lconstant,Lstring)						if(isNaN(Rstring))			{				var _s = _Ext.Cmp(opts).getValue().substring(0,_Ext.Cmp(opts).getValue().length-1);				try{					_Ext.Cmp(opts).setValue(_s);					}				catch(e){					Ext.Error({log : e, name : opts });				}			}		},				IsString:function(){			var Lstring, Lconstant, Rstring;				Lstring = _Ext.Cmp(opts).getValue().length;				Lconstant = ( (_Ext.Cmp(opts).getValue().length)-1 );				Rstring = _Ext.Cmp(opts).getValue().substring(Lconstant,Lstring)						if(!isNaN(Rstring))			{				var _s = _Ext.Cmp(opts).getValue().substring(0,_Ext.Cmp(opts).getValue().length-1);				try{					_Ext.Cmp(opts).setValue(_s);					}				catch(e){					Ext.Error({log : e, name : opts });				}			}		}	});};/* @ def 	:  Join  * * @ triger : Pecah Policy * @ params : jika terjadi pecah polis */ E_ui.prototype.Join = function( params ){ var _a =  { 	http : function(){	 var _p = ''		for(var eval in params )		{			for( var _eval in params[eval]) {				_p = _p +'&' + _eval + '=' + params[eval][_eval];			}		}		return ( _p ? _p : '' );    },		object : function(){	 var object = {};		for(var eval in params )		{			for( var _eval in params[eval]){				object[_eval] = params[eval][_eval];			}			}				return ( object ? object : '' );	},		array :function() {	 var _array = []; 		for(var eval in params )		{			for( var _eval in params[eval]){				_array[_eval] = params[eval][_eval];			}			}				return ( _array ? _array : false );	} }  return _a; }; E_ui.prototype.Date = function( opts ){ var _ui = opts; var _Ext = new E_ui(); return({		Sort : function( f ){			_Ext.Cmp(opts).setMaxlength(5);			var _find = _Ext.Cmp(opts).getValue();			try {				if ( _find.match(/^\d{2}$/) !== null) { 					_Ext.Cmp(opts).setValue( _find + ( f?f:'/' ) );				}			}			catch(e){				console.log(e)			}			},				Long : function( f ){			_Ext.Cmp(opts).setMaxlength(10);			var _find = _Ext.Cmp(opts).getValue();			try			{				if ( _find.match(/^\d{2}$/) !== null) {_Ext.Cmp(opts).setValue(_find + f ); }				else if ( _find.match(/^\d{2}\-\d{2}$/)!== null) {_Ext.Cmp(opts).setValue(_find + f );  }			}			catch(e){				console.log(e)			}		}   });};E_ui.prototype.Serialize = function( _document ){ var frm = _document;	return({		getForm : function(){			var elementsform = document.forms;			var formIndex = 0; 			for( var element in elementsform ){				if( elementsform[element].name == frm ){					formIndex = element;				}			}			return formIndex;		},		getArrayJoin : function(){			var arrayJoin = new Array();			var allElements = new Array(this.getInput(),this.getSelect(),this.getChecked(), this.getTextarea());			for(var i in allElements ){				for(var x in allElements[i]){					arrayJoin[x] = allElements[i][x];				}			}			return arrayJoin;		},				getInput:function(){			var _aInput = [];			if( this.getForm()!='' ){				var elements = document.forms[this.getForm()].getElementsByTagName('input');				for( var i= 0; i<elements.length; i++){					if( (elements[i].type!='checkbox') && (elements[i].type!='button') ){						_aInput[elements[i].name] = elements[i].value; 					}				}				return _aInput;			}			else{				Ext.Error({					log  : "No Form identification..",					name : "Ext.Serialize(objhandle).getInput()"				});			}		},				getChecked:function(){			try			{				var _aInput = []				if( this.getForm()!='' )				{					var elements = document.forms[this.getForm()].getElementsByTagName('input');					for( var i= 0; i<elements.length; i++)					{												if(elements[i].type=='checkbox' || elements[i].type=='radio')						{							chkString='';							dNumber= document.getElementsByName(elements[i].name);							for(x=0; x<dNumber.length; x++)							{								if(dNumber[x].checked)								{									chkString=chkString+','+dNumber[x].value;								}							 }							chkString=chkString.substring(1,(chkString.length));							_aInput[elements[i].name] = chkString;						}											}										return _aInput;				}				else					console.log("No Form identification..");				}			catch(e)			{				Ext.Error({					log  : e,					name : "Ext.Serialize(objhandle).getChecked()"				});			}			},		getTextarea:function(){			try{				var _aInput = []				if( this.getForm()!='' )				{					var elements = document.forms[this.getForm()].getElementsByTagName('textarea');					for( var i= 0; i<elements.length; i++)					{						_aInput[elements[i].id] = elements[i].value; 					}					return _aInput;				}				else					console.log("No Form identification..");				}			catch(e)			{				Ext.Error({					log  : e,					name : "Ext.Serialize(objhandle).getTextarea()"				});			}			},		getSelect:function(){			var _aSelect = [];			if( this.getForm()!='' ){				var elements = document.forms[this.getForm()].getElementsByTagName('select');				for( var i= 0; i<elements.length; i++){					if( (elements[i].type!='checkbox') && (elements[i].type!='button') ){						_aSelect[elements[i].name] = elements[i].value; 					}				}				return _aSelect;			}			else				console.log("No Form identification..");		},				getElement:function(){			var _aElements = this.getArrayJoin();			if( _aElements ) 				return _aElements			else				return false;		}	});}; E_ui.prototype.Ajax=function( fn ){	return ( { /*   * Ext.Window()._w(); -> constructor   * in child parent window available   */	_ajaxSetup : ( function( fn ) {		var _uri_win = '';		 for( var _p in fn.param ) 			if( _uri_win != null ) _uri_win = _uri_win +''+ _p +'='+ fn.param[ _p ] +'&'; 							_uri_win  = _uri_win.substring( 0, ( _uri_win.length-1) ).replace(/\s+/g, '%20');			 return fn.url +'?'+ _uri_win;	})( fn ),	 /*   * Ext.Window()._w(); -> constructor   * in child parent window available   */			responseText : function(){		try {		   if( this._ajaxSetup!='' && this._ajaxSetup !== undefined )			{				xmlJSON = null;				xmlJSON = new XMLHttpRequest();				xmlJSON.open( ( fn.method ? fn.method : 'GET' ), this._ajaxSetup, false );				try {					xmlJSON.send();					return eval(xmlJSON.responseText.trim());				}				catch(e){					alert(e);				}			}			}		catch(e){			alert(e);		}	},  /*   * Ext.Window()._w(); -> constructor   * in child parent window available   */			json:function(){		try {		   if( this._ajaxSetup!='') {				xmlJSON = null;				xmlJSON = new XMLHttpRequest();				xmlJSON.open( ( fn.method ? fn.method : 'GET' ), this._ajaxSetup, false );				xmlJSON.send();					var ERROR = JSON.parse( xmlJSON.responseText.trim() );					if( ERROR ) {						return ERROR;					}				}			}		catch(e){			alert(e);		}	},	 /*   * Ext.Window()._w(); -> constructor   * in child parent window available   */  	aJSON : function( response ){		JSON.parse( ( response ? response : null ) );  		}, /*   * Ext.Window()._w(); -> constructor   * in child parent window available   */    post : function(){		var _XML;		try {					if( this._ajaxSetup ) {				try {					_XML = new XMLHttpRequest(); 					_XML.addEventListener('load', fn.ERROR, true ); 					_XML.open( ( fn.method ? fn.method : 'GET' ), this._ajaxSetup );					_XML.send(null);				} 				catch(e){					alert(e);				}			}				}		catch(e){ alert(e); }	},   /*   * Ext.Window()._w(); -> constructor   * in child parent window available   */			upload:function(){		var forms, _filenames, _XML;		try {			  _elements	 = new FormData(); 			  _filenames = Ext.Cmp("fileToupload").getElementId().files[0];			  			  			  if( this._ajaxSetup !='' ){				try {					_elements.append("fileToupload", _filenames);					_XML = new XMLHttpRequest(); 					_XML.addEventListener('load',fn.complete, true);					_XML.open( ( fn.method ? fn.method : 'POST' ), this._ajaxSetup );					_XML.send(_elements);				}				catch(e){					alert(e);				}				  }			  else				console.log("no files ");			}			catch(e){				alert(e)		}	},	  /*   * Ext.Window()._w(); -> constructor   * in child parent window available   */			load : function( id ){		try {			var send_data = '', xmlJSON;			if( this._ajaxSetup!='' && this._ajaxSetup !== undefined )			{				xmlJSON = new XMLHttpRequest();				xmlJSON.open(( fn.method ? fn.method : 'GET' ), this._ajaxSetup, false );				xmlJSON.setRequestHeader("Content-type", "application/x-www-form-urlencoded");				xmlJSON.send(send_data); // send data 				xmlJSON.onreadystatechange =(function() 				{					var responseHTTP = xmlJSON.responseText, scripts = new Array();						Ext.Cmp(id).setText(responseHTTP); //target response id 						while(responseHTTP.indexOf("<script") > -1 || responseHTTP.indexOf("</script") > -1) 						{							var s 	= responseHTTP.indexOf("<script"),								s_e = responseHTTP.indexOf(">", s),								e 	= responseHTTP.indexOf("</script", s),								e_e = responseHTTP.indexOf(">", e);															scripts.push(responseHTTP.substring(s_e+1, e));							responseHTTP = responseHTTP.substring(0, s) + responseHTTP.substring(e_e+1);						}												for(var i=0; i<scripts.length; i++) {							try { eval(scripts[i]); }							catch(e) { 								console.log(" Error :"+ e); 							}						}				})();			}			}		catch(e){			alert(e);		}	} }); }; E_ui.prototype.Window = function( fn ){return({   /* 	* Ext.Window()._w(); -> constructor 	* in child parent window available 	*/		_w : false,		  /* 	* Ext.Window()._setup(); -> constructor 	* in child parent window available 	*/		_setup : ( function(fn) {		var _uri_win = '';		for( var _p in fn.param ) 				if( _uri_win != null )  _uri_win = _uri_win +''+ _p +'='+ fn.param[ _p ] +'&'; 								_uri_win  = _uri_win.substring( 0, ( _uri_win.length-1) ).replace(/\s+/g, '%20');				return fn.url +'?'+ _uri_win;	})(fn),			/* 	 * Ext.Window().open();	 * in child parent window available 	 */		open : function(){		var _w_a = true, _w_popup='';		if( _w_a && _w_a != null ) 		{			if( fn.right ) _w_popup = _w_popup+'right='+fn.right+',';			if( fn.left ) _w_popup = _w_popup+'left='+fn.left+',';			if( fn.top ) _w_popup = _w_popup+'top='+fn.top+',';			if( fn.width ) _w_popup = _w_popup+'width='+fn.width+',';			if( fn.height ) _w_popup = _w_popup+'height='+fn.height+',';			if( fn.menubar ) _w_popup = _w_popup+'menubar='+fn.menubar+',';			if( fn.scrollbars ) _w_popup = _w_popup+'scrollbars='+fn.scrollbars+',';			if( fn.status ) _w_popup = _w_popup+'status='+fn.status+',';			if( fn.toolbar ) _w_popup = _w_popup+'toolbar='+fn.toolbar+',';			if( fn.resizable ) _w_popup = _w_popup+'resizable='+fn.resizable+',';						if( _w_popup ){					this._w = window.open( ( this._setup ? this._setup : null), ( fn.name ? fn.name : 'ExtWin' ), _w_popup);				}			}	},   /* 	* Ext.Window().available(); 	* check definiion open window child on 	* window 	*/		available : function() { 		return this._w;  	},		newtab : function() {		window.open( this._setup );	},			/* 	 * Ext.Window().popup(); 	 * check definiion open window child on 	 * window 	*/		popup:function() 	{		var _w_a = true, _w_popup='';		if( _w_a && _w_a != '' ) 		{			if( fn.right ) _w_popup = _w_popup+'right='+fn.right+',';				if( fn.left ) _w_popup = _w_popup+'left='+fn.left+',';				if( fn.top ) _w_popup = _w_popup+'top='+fn.top+',';				if( fn.width ) _w_popup = _w_popup+'width='+fn.width+',';				if( fn.height ) _w_popup = _w_popup+'height='+fn.height+',';				if( fn.menubar ) _w_popup = _w_popup+'menubar='+fn.menubar+',';				if( fn.scrollbars ) _w_popup = _w_popup+'scrollbars='+fn.scrollbars+',';				if( fn.status ) _w_popup = _w_popup+'status='+fn.status+',';				if( fn.toolbar ) _w_popup = _w_popup+'toolbar='+fn.toolbar+',';				if( fn.resizable ) _w_popup = _w_popup+'resizable='+fn.resizable+',';				if( _w_popup ){					this._w = window.open( ( this._setup ? this._setup : null), ( fn.name ? fn.name : 'ExtWin' ), _w_popup );					this._w.focus();				}		}	 }  });};  E_ui.prototype.BASE64 = ( function(){ return( {			_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",		encode : function (input) {			var output = "";			var chr1, chr2, chr3, enc1, enc2, enc3, enc4;			var i = 0;						input = this._utf8_encode(input);			while (i < input.length) {				chr1 = input.charCodeAt(i++);				chr2 = input.charCodeAt(i++);				chr3 = input.charCodeAt(i++);								enc1 = chr1 >> 2;				enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);				enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);				enc4 = chr3 & 63;								if (isNaN(chr2)) {					enc3 = enc4 = 64;				} else if (isNaN(chr3)) {					enc4 = 64;				}				output = output +				this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +				this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);			}			return output;		},		// public method for decoding		decode : function (input) {			var output = "";			var chr1, chr2, chr3;			var enc1, enc2, enc3, enc4;			var i = 0;			input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");			while (i < input.length) {				enc1 = this._keyStr.indexOf(input.charAt(i++));				enc2 = this._keyStr.indexOf(input.charAt(i++));				enc3 = this._keyStr.indexOf(input.charAt(i++));				enc4 = this._keyStr.indexOf(input.charAt(i++));				chr1 = (enc1 << 2) | (enc2 >> 4);				chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);				chr3 = ((enc3 & 3) << 6) | enc4;				output = output + String.fromCharCode(chr1);				if (enc3 != 64) {					output = output + String.fromCharCode(chr2);				}				if (enc4 != 64) {					output = output + String.fromCharCode(chr3);				}			}			output = this._utf8_decode(output);			return output;		},		// private method for UTF-8 encoding				_utf8_encode : function (string) {			string = string.replace(/\r\n/g,"\n");			var utftext = "";			for (var n = 0; n < string.length; n++) {				var c = string.charCodeAt(n);				if (c < 128) {					utftext += String.fromCharCode(c);				}				else if((c > 127) && (c < 2048)) {					utftext += String.fromCharCode((c >> 6) | 192);					utftext += String.fromCharCode((c & 63) | 128);				}				else {					utftext += String.fromCharCode((c >> 12) | 224);					utftext += String.fromCharCode(((c >> 6) & 63) | 128);					utftext += String.fromCharCode((c & 63) | 128);				}			}			return utftext;		},		// private method for UTF-8 decoding		_utf8_decode : function (utftext) {			var string = "";			var i = 0;			var c = c1 = c2 = 0;			while ( i < utftext.length ) {				c = utftext.charCodeAt(i);				if (c < 128) {					string += String.fromCharCode(c);					i++;				}				else if((c > 191) && (c < 224)) {					c2 = utftext.charCodeAt(i+1);					string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));					i += 2;				}				else {					c2 = utftext.charCodeAt(i+1);					c3 = utftext.charCodeAt(i+2);					string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));					i += 3;				}			}			return string;		}   }); })();  /* * Handle Untuk Menampilkan && directory yang akan di gunakan  * oleh system applikasi   */  E_ui.prototype.System = ( function(){  return( {				exec_url :function(){			_url_exec = Ext.DOM.location.pathname.split('/');			return _url_exec;		},				view_sytem_url : function(){			var _url = this.exec_url();			return Ext.DOM.location.protocol+'//'+Ext.DOM.location.host+"/"+_url[1]+"/system";		},				view_page_index : function(){			var _url = this.exec_url();			return Ext.DOM.location.protocol+'//'+Ext.DOM.location.host+"/"+_url[1]+"/index.php";		},				view_app_url: function(){			var _url = this.exec_url();			return Ext.DOM.location.protocol+'//'+Ext.DOM.location.host+"/"+_url[1]+"/application";		},				view_library_url: function(){			var _url = this.exec_url();			return Ext.DOM.location.protocol+'//'+Ext.DOM.location.host+"/"+_url[1]+"/library";		},				view_name_url:function( name ){			Ext.DOM.view_name_url = name;		},				view_file_name : function(){			return Ext.DOM.view_name_url;		}	}); })();  /* * @ def 	: ready function  * * @ param	: test load  * @ type 	: revision  */  E_ui.prototype.Error = function(error){	if( error ){		console.log( Ext.define.NAME+" Severity :\nHandle Object : "+ ( error.name ? error.name : '' ) +", \nMessage :" + ( error.log.message ? error.log.message : error.log ) + ",\nLine Number :" + ( error.log.lineNumber ? error.log.lineNumber : 'no' ) );		}	 } /* * @ def 	: ready function  * * @ param	: test load  * @ type 	: revision  */ E_ui.prototype.document = function(){ 	return ({ 		ready : function( fn ){			//if( window.document.addEventListener ){				window.document.addEventListener("DOMContentLoaded", fn, false)				if( window.document.readyState=='complete'){					fn.call( window.document, Ext );				}			//}			}	});}/* @ def 	:  Ext.Msg("").Confirm()  * * @ triger : Pecah Policy * @ params : jika terjadi pecah polis */ E_ui.prototype.Msg = function( message ){ var message = ( message ? message : '' ), result = {	Confirm : function(){		return window.confirm(message)	},		Success : function(){		return window.alert("Success, "+ message + ".");	},		Error : function(){		return window.alert("Error, "+ message + " !");	},		Info : function(){		return window.alert("Information, "+ message+ " !")	},		Failed : function(){		return window.alert("Failed, "+ message + " !")	}	  };    return result;}    	/* * @ def 	: ready function  * * @ param	: test load  * @ type 	: revision  */ E_ui.prototype.options = function(data){ var fo = ( data.fo ? data.fo : false ), to = ( data.to ? data.to : false ); var result =  {		move : function(){			var selLength = fo.length,				selectedText = new Array(),				selectedValues = new Array(),				selectedCount = 0;							var i;							for(i=selLength-1; i>=0; i--)				{					if(fo.options[i].selected)					{					  selectedText[selectedCount] = fo.options[i].text;					  selectedValues[selectedCount] = fo.options[i].value;					  this.del( fo, i );					  selectedCount++;					}				}								for( i = selectedCount-1; i>=0; i-- )				{					this.add(to, selectedText[i], selectedValues[i]);				}		},				add : function( t1, t2, v) {			var opts = new Option( t2, v ); l = t1.length;			t1.options[l] = opts;		},				del : function( fo, i) { 		  var L = parseInt( ( fo.length ? fo.length :0 ) );			if( L > 0 )			{				fo.options[i] = null;			}		}	}		return result;}/* * @ def 	: ready function  * * @ param	: test load  * @ type 	: revision  */ E_ui.prototype.extend = function( dst, src ){   for (var prop in src ) {	 dst[prop] = src[prop];   }	return dst;};/* * @ def 	: ready function  * * @ param	: test load  * @ type 	: revision  */ var Ext = (function (){ return new E_ui })();
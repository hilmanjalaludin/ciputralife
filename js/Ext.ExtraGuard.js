/** ** *********************************************  ** author < omens > ** created < 2014-01-13 >  ** filename < Ext.EasyCareBlue.js > ** product < Easy Care Blue Product > ** function < controller && vaalidation data > ** Attribute < javascript controller & validation ** for edit data only, not for new insert data ! ** require object javaclass important : ../js/javaclass.js > ** ** ********************************************** **/  var E_ui = function(){ }  /**  @@ author < omens >  @@ version < 0.1 >  @@ get component data test text     **/   E_ui.prototype.IsValid = false;  /**  @@ author < omens >  @@ version < 0.1 >  @@ get component data test text     **/   E_ui.prototype.CreditValid = function(){	if( this.IsValid ) 		return true	else		return false;}; /**  @@ author < omens >  @@ version < 0.1 >  @@ get component data test text     **/ E_ui.prototype.Cmp = function( names )  {	var names = names	return(__ux = {		getElementId:function(){			var _e = document.getElementById(names);			try{				return _e;			}			catch(e){				console.log(e)			}		},				getValue:function(){			var _e = this.getElementId(names);			try{				return _e.value;			}			catch(e){				console.log(e);			}		},				getChecked:function(){			try{				return doJava.checkedValue(names);			}			catch(e){				console.log(e);			}		},				Checked:function(){			var _e = this.getElementId(names);			try{				if( _e.checked ) 					return 1				else					return 0;			}			catch(e){				console.log(e);			}		},						getSelectAll:function(){			try{				return doJava.SelArrVal(names);			}			catch(e){				console.log(e);			}		},				setFocus:function(){			var _e = this.getElementId(names);			try{				return _e.focus();			}			catch(e){				console.log(e);			}			},				disabled:function( b ){		  var _e = this.getElementId(names);			try{				return _e.disabled = b;			}			catch(e){				console.log(e);			}		},		empty:function(){			var _e = this.getValue();			try{				if( _e=='') 					return true;				else					return false;			}			catch(e){				console.log(e);			}			},				setValue:function( s ){			var _e = this.getElementId(names);			try{				return _e.value = s;			}			catch(e){				console.log(e);			}		},				setText:function( s ){			var _e = this.getElementId(names);			try {				_e.innerHTML = s;			}			catch(e){				console.log(e);			}		},		setMaxlength:function( n ){			var _e = this.getElementId(names);			try {				_e.maxLength = n;			}			catch(e){				console.log(e);			}		}	});	  }    /**  @@ author < omens >  @@ version < 0.1 >  @@ get component data test text     **/ E_ui.prototype.Set = function( opts ){	var _ui = opts;	var _Ext = new E_ui();		return(_ux = {		IsNumber:function(){			var Lstring, Lconstant, Rstring;				Lstring = _Ext.Cmp(opts).getValue().length;				Lconstant = ( (_Ext.Cmp(opts).getValue().length)-1 );				Rstring = _Ext.Cmp(opts).getValue().substring(Lconstant,Lstring)						if(isNaN(Rstring))			{				var _s = _Ext.Cmp(opts).getValue().substring(0,_Ext.Cmp(opts).getValue().length-1);				try{					_Ext.Cmp(opts).setValue(_s);					}				catch(e){					console.log(e);				}			}		},				IsString:function(){			var Lstring, Lconstant, Rstring;				Lstring = _Ext.Cmp(opts).getValue().length;				Lconstant = ( (_Ext.Cmp(opts).getValue().length)-1 );				Rstring = _Ext.Cmp(opts).getValue().substring(Lconstant,Lstring)						if(!isNaN(Rstring))			{				var _s = _Ext.Cmp(opts).getValue().substring(0,_Ext.Cmp(opts).getValue().length-1);				try{					_Ext.Cmp(opts).setValue(_s);					}				catch(e){					console.log(e);				}			}		}	});}/** @@ author < omens > @@ version < 0.1 > @@ joining array javascript  @@ to paramter POST/GET **/   E_ui.prototype.Join = function(params){	var _url = '';	try	{			for(var eval in params )		{			for( var _eval in params[eval])			{				_url=_url+'&'+_eval+'='+params[eval][_eval];			}		}		//console.log(_url);		if( _url ) return _url;	}	catch(e){		console.log(e);	}} /**  @@ author < omens >  @@ version < 0.1 >  @@ get component data test text     **/ E_ui.prototype.Date = function( opts ){	var _ui = opts;	var _Ext = new E_ui();		return(_dx = {		Sort : function( f ){			_Ext.Cmp(opts).setMaxlength(5);				var _find = _Ext.Cmp(opts).getValue();				try 				{					if ( _find.match(/^\d{2}$/) !== null) { 						_Ext.Cmp(opts).setValue( _find + ( f?f:'/' ) );					}				}				catch(e){					console.log(e)				}						},				Long : function( f ){			_Ext.Cmp(opts).setMaxlength(10);				var _find = _Ext.Cmp(opts).getValue();			 try 				{					if ( _find.match(/^\d{2}$/) !== null) {_Ext.Cmp(opts).setValue(_find + f ); }					else if ( _find.match(/^\d{2}\-\d{2}$/)!== null) {_Ext.Cmp(opts).setValue(_find + f );  }									}				catch(e){					console.log(e)			}		}	});} /**  @@ author < omens >  @@ version < 0.1 >  @@ get component data test text     **/   E_ui.prototype.Serialize = function( _document ){ var frm = _document;	return(_frm = {		getForm : function(){			var elementsform = document.forms;			var formIndex = 0; 			for( var element in elementsform ){				if( elementsform[element].name == frm ){					formIndex = element;				}			}			return formIndex;		},		getArrayJoin : function(){			var arrayJoin = new Array();			var allElements = new Array(this.getInput(),this.getSelect(),this.getChecked(), this.getTextarea());			for(var i in allElements ){				for(var x in allElements[i]){					arrayJoin[x] = allElements[i][x];				}			}			return arrayJoin;		},				getInput:function(){			var _aInput = [];			if( this.getForm()!='' ){				var elements = document.forms[this.getForm()].getElementsByTagName('input');				for( var i= 0; i<elements.length; i++){					if( (elements[i].type!='checkbox') && (elements[i].type!='button') ){						_aInput[elements[i].name] = elements[i].value; 					}				}				return _aInput;			}			else				console.log("No Form identification..");		},				getChecked:function(){			try{				var _aInput = []				if( this.getForm()!='' )				{					var elements = document.forms[this.getForm()].getElementsByTagName('input');					for( var i= 0; i<elements.length; i++)					{						if( elements[i].type=='radio'||elements[i].type=='checkbox')						{							if( elements[i].checked )							{								_aInput[elements[i].name] = elements[i].value; 							}						}						}					return _aInput;				}				else					console.log("No Form identification..");				}			catch(e)			{				console.log(e);			}			},		getTextarea:function(){			try{				var _aInput = []				if( this.getForm()!='' )				{					var elements = document.forms[this.getForm()].getElementsByTagName('textarea');					for( var i= 0; i<elements.length; i++)					{						_aInput[elements[i].id] = elements[i].value; 					}					return _aInput;				}				else					console.log("No Form identification..");				}			catch(e)			{				console.log(e);			}			},		getSelect:function(){			var _aSelect = [];			if( this.getForm()!='' ){				var elements = document.forms[this.getForm()].getElementsByTagName('select');				for( var i= 0; i<elements.length; i++){					if( (elements[i].type!='checkbox') && (elements[i].type!='button') ){						_aSelect[elements[i].name] = elements[i].value; 					}				}				return _aSelect;			}			else				console.log("No Form identification..");		},		getElement:function(){			var _aElements = this.getArrayJoin();			if( _aElements ) 				return _aElements			else				return false;		}	});}   		/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/  E_ui.prototype.getInsured = function() {	var _Age  = '';	var _CheckBox= Ext.Cmp('cbx_ins_folow').getChecked();	if( _CheckBox!='' )	{		var _insText =_CheckBox.split(',');		var _TypeId = new Array();		if( _CheckBox.length >0 )		{			for( var i in _insText )			{				if( _insText[i]=='0'){					_Age+= "~"+Ext.Cmp('cb_insurance_sp_holdertype').getValue() +"|"+parseInt(Ext.Cmp('txt_insurance_sp_age').getValue());				}				else{					_Age+= "~"+Ext.Cmp('cb_insurance_dp'+_insText[i]+'_holdertype').getValue()+"|"+Ext.Cmp('txt_insurance_dp'+_insText[i]+'_age').getValue();				}				}			return _Age;		}	}	else{		return _Age;	}}  	/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/E_ui.prototype.Holder =function () {	var cb_holder_holdertype    = Ext.Cmp('cb_holder_holdertype').getElementId();	var frm_holder_firstname 	= Ext.Cmp('frm_holder_firstname').getElementId();	var frm_holder_lastname 	= Ext.Cmp('frm_holder_lastname').getElementId();	var cb_holder_idtype		= Ext.Cmp('cb_holder_idtype').getElementId();	var frm_holder_rel			= Ext.Cmp('frm_holder_rel').getElementId();	var frm_holder_dob			= Ext.Cmp('frm_holder_dob').getElementId();	var frm_holder_idno			= Ext.Cmp('frm_holder_idno').getElementId();	var frm_holder_gender		= Ext.Cmp('frm_holder_gender').getElementId();	var frm_holder_title		= Ext.Cmp('frm_holder_title').getElementId();	var isCheckbox 				= Ext.Cmp('chekclist').getElementId();	var text_dob_size			= Ext.Cmp('text_dob_size').getElementId();				if( Ext.Cmp('cb_holder_holdertype').empty() ){ Ext.Cmp('cb_holder_holdertype').getElementId().style.borderColor='red'; alert('Holder Type cannot be empty!'); return false;}	else if( Ext.Cmp('frm_holder_firstname').empty() ){ Ext.Cmp('frm_holder_firstname').getElementId().style.borderColor='red'; alert('First Name cannot be empty!');return false;}	else if( Ext.Cmp('frm_holder_gender').empty() ){ Ext.Cmp('frm_holder_gender').getElementId().style.borderColor='red'; alert('Gender cannot be empty!');  return false; }	else if( Ext.Cmp('frm_holder_dob').empty() ){ Ext.Cmp('frm_holder_dob').getElementId().style.borderColor='red'; alert('Please select DOB!');  return false;}				else if( Ext.Cmp('text_dob_size').getValue()==0 ){ Ext.Cmp('frm_holder_dob').setFocus(); alert('Age Not valid!');  return false; }	else{		return true;	}}/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/	 E_ui.prototype.Payers = function() {		var payer_expired_date_split = (Ext.Cmp('payer_expired_date').getValue()?Ext.Cmp('payer_expired_date').getValue().split('/'):'');	if( Ext.Cmp('payer_salutation').empty() ){alert('Payer Title cannot be empty!'); return false;}	else if( Ext.Cmp('payer_first_name').empty() ){alert('Payer First Name cannot be empty!'); return false;}	else if( Ext.Cmp('payer_gender').empty() ){ alert('Payer Gender cannot be empty!'); return false;}	else if( Ext.Cmp('payer_dob').empty() ){alert('Payer DOB cannot be empty!'); return false;}	else if( Ext.Cmp('payer_holder_idtype').empty() ){alert('ID Type cannot Be Empty!');return false} 	else if( Ext.Cmp('payer_idno').empty() ){alert('ID Number cannot Be Empty!'); return false}	else if( Ext.Cmp('payer_address1').empty() ){ alert('Payer Address cannot be empty!'); return false;}	else if( Ext.Cmp('payer_mobile_phone').empty() ){ alert('Mobile Phone cannot be empty!'); return false;}	else if( Ext.Cmp('payer_city').empty() ){ alert('Payer City cannot be empty!'); return false;}	else if( Ext.Cmp('payer_home_phone').empty() ){ alert('Payer Home Phone cannot be empty!'); return false;}	else if( Ext.Cmp('payer_zip_code').empty() ){ alert('Payer Zip Code cannot be empty!'); return false;}	else if( Ext.Cmp('payer_office_phone').empty() ){ alert('Office Phone cannot be empty!'); return false;}	else if( Ext.Cmp('payer_province').empty() ){ alert('Payer Province cannot be empty!'); return false;}	else if( Ext.Cmp('payer_province').empty() ){ alert('Payer Province Not Available!'); return false;}	else if( Ext.Cmp('payer_card_number').empty() ){alert('Payer Card Number cannot be empty!'); return false;}	else if( Ext.Cmp('payer_expired_date').empty() ){ alert('Payer Expiration Date cannot be empty!'); return false;}	else if( Ext.Cmp('payer_card_type').empty() ){ alert('Payer Card Type cannot be empty!'); return false;}	else if( Ext.Cmp('payer_expired_date').getValue().indexOf("/") < 0){ alert('Payer Expiration Date is not valid'); return false;}	else if( Ext.Cmp('payer_expired_date').getValue().length !=5 ){ alert('Payer Expiration Date is less than 5'); return false;}	else if( (parseInt(payer_expired_date_split[0])>12) ){ alert('Month Not Available!'); return false;}	else if( Ext.Cmp('payer_card_number').getValue().length <16){  alert('Payer Card Number is less than 16'); return false; }	else{		if( Ext.CreditValid() ){ return true; }		else { 			alert('Card Number is not valid!')			return false; 		}	}	 } /** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/ E_ui.prototype.Beneficery = function() {	var _Benefiecery = Ext.Cmp('benef_box').getChecked();	if( _Benefiecery.length > 0 )	{		var ListView = _Benefiecery.split(',');		for(var i in ListView)		{			if( Ext.Cmp('txt_benef'+ListView[i]+'_holdertype').empty()){ alert('Beneficiery '+ListView[i]+' :: Holder Type is empty');}			else if( Ext.Cmp('txt_benef'+ListView[i]+'_rel').empty()){ alert('Beneficiery '+ListView[i]+' :: Relation is empty');}			else if( Ext.Cmp('txt_benef'+ListView[i]+'_first').empty()){ alert('Beneficiery '+ListView[i]+' :: First Name is empty');}			else if( Ext.Cmp('txt_benef'+ListView[i]+'_lastname').empty()){ alert('Beneficiery '+ListView[i]+' :: Last Name is empty');}			else if( Ext.Cmp('txt_benef'+ListView[i]+'_persen').empty()){ alert('Beneficiery '+ListView[i]+' :: Percentage is empty');}			else{				return true;			}		}	}	else{ return true; } }  /** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/E_ui.prototype.Insured = function(){	var  _Conds   = true; 	var _CheckBox =  Ext.Cmp('cbx_ins_folow').getChecked();	if( _CheckBox.length >0 )	{			var listBox = _CheckBox.split(',');		for( var i in listBox )		{			if( listBox[i]=='0') 			{				Ext.Cmp('cb_insurance_sp_holdertype').disabled(1);				if( Ext.Cmp('cb_insurance_sp_relation').empty() ){ alert('Relation Spouse cannot be empty!'); return false;}				else if( Ext.Cmp('cb_insurance_sp_salut').empty() ){alert('Title Spouse cannot be empty!'); return false;}				else if( Ext.Cmp('txt_insurance_sp_firstname').empty() ){ alert('First Name Spouse cannot be empty!'); return false;}				else if( Ext.Cmp('txt_insurance_sp_gender').empty() ){ alert('Gender Spouse cannot be empty!'); return false;}				else if( Ext.Cmp('txt_insurance_sp_dob').empty() ){ alert('DOB Spouse cannot be empty!'); return false;}				else if( Ext.Cmp('txt_insurance_sp_age').empty() ){ alert('Age Spouse cannot be empty!'); return false;}				else{  _Conds = true; }			}						if( listBox[i]!=0)			{				Ext.Cmp('cb_insurance_sp_holdertype').disabled(1);				if( Ext.Cmp('cb_insurance_dp'+listBox[i]+'_holdertype').empty() ){ alert('Dependent '+listBox[i]+' :: Holder type cannot be empty!'); return false; }				else if( Ext.Cmp('cb_insurance_dp'+listBox[i]+'_rel').empty() ){ alert('Dependent '+listBox[i]+' :: Relation cannot be empty!'); return false;}				else if( Ext.Cmp('cb_insurance_dp'+listBox[i]+'_salut').empty()){ alert('Dependent '+listBox[i]+' :: Title cannot be empty! '); return false;}				else if( Ext.Cmp('txt_insurance_dp'+listBox[i]+'_firstname').empty()){ alert('Dependent '+listBox[i]+' :: First Name cannot be empty!'); return false;}				else if( Ext.Cmp('cb_insurance_dp'+listBox[i]+'_gender').empty()){ alert('Dependent_gender'+listBox[i]+' :: Gender cannot be empty!'); return false;}				else if( Ext.Cmp('txt_insurance_dp'+listBox[i]+'_dob').empty()){ alert('Dependent_dob'+listBox[i]+' :: DOB cannot be empty!'); return false;}				else if( Ext.Cmp('txt_insurance_dp'+listBox[i]+'_age').empty()){ alert('Dependent_age'+listBox[i]+' :: Age cannot be empty!'); return false;}				else { _Conds = true; }				}			}		}	else {  _Conds = true; }		return _Conds;}Ext = new E_ui(); // End Of Class Javascript		/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/ var InterestWithSpouse = function() {	doJava.File = '../class/class.frm.policy.php';	doJava.Params = {			action :'interest_with_spouse',			call_status_id : CallStatus, 		} 			var error_status = doJava.eJson();	if( error_status.result){ return true; }	else{ return false; }	}/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/  var getUmurSize = function()		{			if( iniatedUmur!=''){				var iniatedUmurx = iniatedUmur.trim().split(" ");				return iniatedUmurx[0];			}			else{				return false;			}	}		/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/ var getPlanByProduct = function(object) {	var select_id = Ext.Cmp(object.name).getSelectAll();		doJava.File = '../class/class.edit.extraguard.php';		doJava.Params = {			action	: 'plan',			ProductId : select_id,			CustomerId : CustomerId		}	var error = doJava.eJson();	Ext.Cmp('html_inner_plan').setText(error.content); }		/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/ var AjaxGetSizeAge = function(date,init){		doJava.File = '../class/class.frm.policy.php';		doJava.Params = {			action	: 'hitung_dob_customer',			user_dob : date,			CampaignId : CampaignId,			init:init		}					var JsonData = doJava.eJson();		if( JsonData.result){ 			return JsonData.umur_size; 		}		else{				alert(JsonData.message);				return JsonData.complete;			}	}		/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/var toRenderValue = function(date,name,init) {		if( name =='frm_holder_dob'){		doJava.File = '../class/class.frm.policy.php';		doJava.Params = {			action	: 'hitung_dob_customer',			user_dob : date,			CampaignId : CampaignId,			init : init		}		var JsonData = doJava.eJson();		if( JsonData.result){ 			Ext.Cmp('text_dob_size').setValue(JsonData.umur_size); 		}		else{			alert(JsonData.message);			Ext.Cmp('text_dob_size').setValue(JsonData.complete); 		}	}}  /** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/ 	var getValueTabs3 = function()	{		if( Ext.Cmp('plan_product_id').empty() ){ Ext.Cmp('plan_product_id').setFocus(); return false; }		else if( Ext.Cmp('plan_plan').empty() ) { Ext.Cmp('plan_plan').setFocus(); return false; }		else if( Ext.Cmp('plan_paymode').empty() ){ Ext.Cmp('plan_paymode').setFocus(); return false; }		else if( Ext.Cmp('plan_paytype').empty() ) { Ext.Cmp('plan_paytype').setFocus(); return false; }		else{			return true;		}	} 		/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/var clearTextAge = function(string){	var ArrString = string.split(' ');	return ArrString[0].trim(); }/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/var getPremiByPlan=function(planid){	var groupType 	= Ext.Cmp("cb_holder_holdertype").getValue(); 		var umur_user  	= Ext.Cmp("text_dob_size").getValue();	var ProductId  	= Ext.Cmp("plan_product_id").getSelectAll();	var paymode	    = Ext.Cmp("plan_paymode").getValue();	var url_string  = groupType+"|"+umur_user+" "+ Ext.getInsured();		doJava.File   = "../class/class.frm.policy.php";		doJava.Params = {			action	   : "hitung_premi_customer",			urlstring  : url_string,			planid	   : planid, 				campaignid : CampaignId,			productid  : ProductId,			paymode    : paymode,			groupType  : groupType		}					var error_size_data = doJava.eJson();		doJava.getFormBenefit();		Ext.Cmp('callculation_premi').setText(error_size_data.content);}/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/	var getPremiByPlanMode = function(opts){	var groupType 	= Ext.Cmp("cb_holder_holdertype").getValue(); 		var umur_user  	= Ext.Cmp("text_dob_size").getValue();	var Paymode		= Ext.Cmp("plan_paymode").getValue();	var plan_id     = Ext.Cmp('plan_plan').getValue();	var ProductId  	= Ext.Cmp("plan_product_id").getSelectAll();	var url_string  = groupType+"|"+umur_user+" "+Ext.getInsured();		doJava.File   = "../class/class.frm.policy.php";	doJava.Params = 	{		action : "hitung_premi_customer",		urlstring : url_string, planid : plan_id, 			campaignid : CampaignId, productid : ProductId,		paymode : Paymode, groupType : groupType	}					var error_size_data = doJava.eJson();		doJava.getFormBenefit();		Ext.Cmp('callculation_premi').setText(error_size_data.content);}			/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/  var saveCreatePolish = function() {	var FormTabs1		= Ext.Serialize('frm_tabs1').getElement(); 	var FormTabs2 		= Ext.Serialize('frm_tabs2').getElement();	var FormTabs3 		= Ext.Serialize('frm_tabs3').getElement();	var FormTabs4 		= Ext.Serialize('frm_tabs4').getElement();	var FormTabs5 		= Ext.Serialize('frm_tabs5').getElement();	var Benefiecery   	= Ext.Cmp('benef_box').getChecked();	var Insured  	  	= Ext.Cmp('cbx_ins_folow').getChecked();	var ProductId	  	= Ext.Cmp('plan_product_id').getSelectAll();	var holder_age    	= Ext.Cmp('text_dob_size').value;	var holderIsPayer 	= Ext.Cmp('chekclist').Checked();	// alert(Insured);	// return false;		doJava.File  = '../class/class.edit.extraguard.php';		doJava.Params = {			action :'update&'+Ext.Join( new Array( FormTabs1, FormTabs2, FormTabs3, FormTabs4, FormTabs5 ) ),			holder_age : holder_age, CustomerId : CustomerId,			CampaignId : CampaignId, insuranceBox : Insured, 			ProductId : ProductId, benefBox : Benefiecery,			holderIsPayer : holderIsPayer		} 						if( Ext.Holder() && Ext.Insured() && Ext.Payers() && Ext.Beneficery() ) // Validasi Inputan		{				Ext.Cmp('loading_html').setText("<img src='../gambar/loading.gif'> Please Wait...");			var error_datas = doJava.eJson();			if( error_datas.result==1){				alert(error_datas.error);				Ext.Cmp('loading_html').setText('');			}			else{				alert(error_datas.error);				Ext.Cmp('loading_html').setText('');			}		}		else{				alert('Input Not Complete!');		}  }/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/var getNexValidationCard = function(value){	doJava.File = '../class/class.frm.policy.php';	doJava.Params = {		action : 'value_sec_num',		number : value,	}			var error = doJava.eJson();	if( error.result ){		Ext.Cmp('error_message_html').setText("<img src=../gambar/icon/accept.png>");		Ext.IsValid = true;  	}	else{		Ext.Cmp('error_message_html').setText("<img src=../gambar/icon/cancel.png>"); 		Ext.IsValid = false;  	}}/** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/ var setMandatory = function(object)	{		getPremiByPlanMode(0);		if( object ){			Ext.Cmp('frm_holder_idno').getElementId().style.borderColor='red';		}	}		 /** *@ get folower insured by holder set *@ and then return data by user define *@ return < string > **/	 doJava.getFormBenefit = function() {		var plan_name = Ext.Cmp('plan_plan').getValue();		var product_id = Ext.Cmp('plan_product_id').getValue();			this.File  = '../class/class.frm.tpl.php';			this.Params = {				action		:'get_form_plan',				productid	: product_id,				planbenef	: plan_name			}						this.Load('product_benefit'); }	
/** ** *********************************************  ** author < omens > ** created < 2014-01-13 >  ** filename < Ext.Window.referal.js > ** function < controller && vaalidation data > ** Attribute < javascript controller & validation ** for edit data only, not for new insert data ! ** require object javaclass important : ../js/javaclass.js > ** ** ********************************************** **/   var E_ui = function(){ }  var edit = false; /**  @@ author < omens >  @@ version < 0.1 >  @@ get component data test text     **/   E_ui.prototype.Content = function( n ){	var html = 				"<fieldset style=\"border:1px solid #dddddd;\">\n"+				"<legend style=\"color:#B00000;font-weight:bold;font-family:arial;font-size:12px;\">Referal "+(n+1)+"</legend>"+				"<table border=\"0\" width=\"100%\" cellpadding=\"4px;\">\n"+				"<script>"+						"$(function(){"+							"$('#DOB_"+n+"').datepicker({showOn: 'button', buttonImage: '../gambar/calendar.gif', buttonImageOnly: true, dateFormat:'dd-mm-yy',readonly:true});"+						"});"+					"</script>\n"+				"<tr>\n"+					"<td><input type=\"checkbox\" name=\"chk_rows\" onclick=\"\" value=\""+n+"\" id =\"chk_rows"+n+"\" checked></td>\n"+					"<td class=\"header-text wajib\">Referal Name</td>\n"+					"<td class=\"header-content\"><input type=\"input\"  class=\"input\" name=\"CustomerName_"+n+"\" id=\"CustomerName_"+n+"\" ></td>\n"+					"<td class=\"header-text wajib\" valign=\"top\">Phone1</td>\n"+					"<td class=\"header-content\" valign=\"top\"><input type=\"input\" onkeyup=\"Ext.Set(this.id).IsNumber();\" class=\"input\" name=\"PhoneNumber1_"+n+"\" id=\"PhoneNumber1_"+n+"\"></td>\n"+					"<td class=\"header-text wajib\">Phone 2</td>\n"+					"<td class=\"header-content\"><input type=\"input\" class=\"input\" onkeyup=\"Ext.Set(this.id).IsNumber();\" name=\"PhoneNumber2_"+n+"\" id=\"PhoneNumber2_"+n+"\"></td>\n"+					"<td class=\"header-text\">Phone 3</td>\n"+					"<td class=\"header-content\"><input type=\"input\" class=\"input\" onkeyup=\"Ext.Set(this.id).IsNumber();\" name=\"PhoneNumber3_"+n+"\" id=\"PhoneNumber3_"+n+"\"></td>\n"+				"</tr>\n"+				"<tr>\n"+					"<td>&nbsp;</td>\n"+					"<td class=\"header-text\">DOB (dd-mm-yyyy)</td>\n"+					"<td class=\"header-content\"><input type=\"text\"  class=\"input\" name=\"DOB_"+n+"\" id=\"DOB_"+n+"\" disabled></td>\n"+					"<td class=\"header-text\">Relasi</td>\n"+					"<td class=\"header-content\"><input type=\"input\"  class=\"input\" name=\"Relasi_"+n+"\" id=\"Relasi_"+n+"\" ></td>\n"+				"</tr>\n"+				"<tr style=\"display:none;\">\n"+						"<td class=\"header-text\">Referal Address</td>\n"+					"<td class=\"header-content\" colspan=\"8\"><textarea class=\"textarea\" name=\"CustomerAddress_"+n+"\" id=\"CustomerAddress_"+n+"\"></textarea></td>\n"+				"</tr>\n"+				"</table></fieldset>\n";	return html;			}   /**  @@ author < omens >  @@ version < 0.1 >  @@ get component data test text     **/   E_ui.prototype.Table = function( id ){	var _Id = id;	return ( _table = { 		addRows : function(){			var _elem  = Ext.Cmp(id).getElementId();			var _count = _elem.rows.length;			var row = _elem.insertRow( _count );			row.insertCell(0).innerHTML = Ext.Content(_count);			},				removeRows : function(){			try 			{				var table = Ext.Cmp(id).getElementId();				var rowCount = table.rows.length;				for(var i=0; i<rowCount; i++) 				{					var row = table.rows[i];					var ChkBox = Ext.Cmp('chk_rows').getChecked();					var aChkBox = ChkBox.split(',');					for(var x in aChkBox )					{						if( aChkBox[x]==i)						{							table.deleteRow(aChkBox[x]);							rowCount--;							i--;						}					}				}            }			catch(e) {                alert(e);            }		}	});  }  /**  @@ author < omens >  @@ version < 0.1 >  @@ get component data test text     **/      E_ui.prototype.Cmp = function( names )  {	var names = names	return(__ux = {		getElementId:function(){			var _e = document.getElementById(names);			try{				return _e;			}			catch(e){				console.log(e)			}		},				getValue:function(){			var _e = this.getElementId(names);			try{				return _e.value;			}			catch(e){				console.log(e);			}		},				getChecked:function(){			try{				return doJava.checkedValue(names);			}			catch(e){				console.log(e);			}		},				Checked:function(){			var _e = this.getElementId(names);			try{				if( _e.checked ) 					return 1				else					return 0;			}			catch(e){				console.log(e);			}		},						getSelectAll:function(){			try{				return doJava.SelArrVal(names);			}			catch(e){				console.log(e);			}		},				setFocus:function(){			var _e = this.getElementId(names);			try{				return _e.focus();			}			catch(e){				console.log(e);			}			},				disabled:function( b ){		  var _e = this.getElementId(names);			try{				return _e.disabled = b;			}			catch(e){				console.log(e);			}		},		empty:function(){			var _e = this.getValue();			try{				if( _e=='') 					return true;				else					return false;			}			catch(e){				console.log(e);			}			},				setValue:function( s ){			var _e = this.getElementId(names);			try{				return _e.value = s;			}			catch(e){				console.log(e);			}		},				setText:function( s ){			var _e = this.getElementId(names);			try {				_e.innerHTML = s;			}			catch(e){				console.log(e);			}		},		setMaxlength:function( n ){			var _e = this.getElementId(names);			try {				_e.maxLength = n;			}			catch(e){				console.log(e);			}		}	});	  }    /**  @@ author < omens >  @@ version < 0.1 >  @@ get component data test text     **/ E_ui.prototype.Set = function( opts ){	var _ui = opts;	var _Ext = new E_ui();		return(_ux = {		IsNumber:function(){			var Lstring, Lconstant, Rstring;				Lstring = _Ext.Cmp(opts).getValue().length;				Lconstant = ( (_Ext.Cmp(opts).getValue().length)-1 );				Rstring = _Ext.Cmp(opts).getValue().substring(Lconstant,Lstring)						if(isNaN(Rstring))			{				var _s = _Ext.Cmp(opts).getValue().substring(0,_Ext.Cmp(opts).getValue().length-1);				try{					_Ext.Cmp(opts).setValue(_s);					}				catch(e){					console.log(e);				}			}		},				IsString:function(){			var Lstring, Lconstant, Rstring;				Lstring = _Ext.Cmp(opts).getValue().length;				Lconstant = ( (_Ext.Cmp(opts).getValue().length)-1 );				Rstring = _Ext.Cmp(opts).getValue().substring(Lconstant,Lstring)						if(!isNaN(Rstring))			{				var _s = _Ext.Cmp(opts).getValue().substring(0,_Ext.Cmp(opts).getValue().length-1);				try{					_Ext.Cmp(opts).setValue(_s);					}				catch(e){					console.log(e);				}			}		}	});}/** @@ author < omens > @@ version < 0.1 > @@ joining array javascript  @@ to paramter POST/GET **/   E_ui.prototype.Join = function(params){	var _url = '';	try	{			for(var eval in params )		{			for( var _eval in params[eval])			{				_url=_url+'&'+_eval+'='+params[eval][_eval];			}		}		//console.log(_url);		if( _url ) return _url;	}	catch(e){		console.log(e);	}} /**  @@ author < omens >  @@ version < 0.1 >  @@ get component data test text     **/ E_ui.prototype.Date = function( opts ){	var _ui = opts;	var _Ext = new E_ui();		return(_dx = {		Sort : function( f ){			_Ext.Cmp(opts).setMaxlength(5);				var _find = _Ext.Cmp(opts).getValue();				try 				{					if ( _find.match(/^\d{2}$/) !== null) { 						_Ext.Cmp(opts).setValue( _find + ( f?f:'/' ) );					}				}				catch(e){					console.log(e)				}						},				Long : function( f ){			_Ext.Cmp(opts).setMaxlength(10);				var _find = _Ext.Cmp(opts).getValue();			 try 				{					if ( _find.match(/^\d{2}$/) !== null) {_Ext.Cmp(opts).setValue(_find + f ); }					else if ( _find.match(/^\d{2}\-\d{2}$/)!== null) {_Ext.Cmp(opts).setValue(_find + f );  }									}				catch(e){					console.log(e)			}		}	});} /**  @@ author < omens >  @@ version < 0.1 >  @@ get component data test text     **/   E_ui.prototype.Serialize = function( _document ){ var frm = _document;	return(_frm = {		getForm : function(){			var elementsform = document.forms;			var formIndex = 0; 			for( var element in elementsform ){				if( elementsform[element].name == frm ){					formIndex = element;				}			}			return formIndex;		},		getArrayJoin : function(){			var arrayJoin = new Array();			var allElements = new Array(this.getInput(),this.getSelect(),this.getChecked(), this.getTextarea());			for(var i in allElements ){				for(var x in allElements[i]){					arrayJoin[x] = allElements[i][x];				}			}			return arrayJoin;		},				getInput:function(){			var _aInput = [];			if( this.getForm()!='' ){				var elements = document.forms[this.getForm()].getElementsByTagName('input');				for( var i= 0; i<elements.length; i++){					if( (elements[i].type!='checkbox') && (elements[i].type!='button') ){						_aInput[elements[i].name] = elements[i].value; 					}				}				return _aInput;			}			else				console.log("No Form identification..");		},				getChecked:function(){			try{				var _aInput = []				if( this.getForm()!='' )				{					var elements = document.forms[this.getForm()].getElementsByTagName('input');					for( var i= 0; i<elements.length; i++)					{						if( elements[i].type=='radio'||elements[i].type=='checkbox')						{							if( elements[i].checked )							{								_aInput[elements[i].name] = elements[i].value; 							}						}						}					return _aInput;				}				else					console.log("No Form identification..");				}			catch(e)			{				console.log(e);			}			},		getTextarea:function(){			try{				var _aInput = []				if( this.getForm()!='' )				{					var elements = document.forms[this.getForm()].getElementsByTagName('textarea');					for( var i= 0; i<elements.length; i++)					{						_aInput[elements[i].id] = elements[i].value; 					}					return _aInput;				}				else					console.log("No Form identification..");				}			catch(e)			{				console.log(e);			}			},		getSelect:function(){			var _aSelect = [];			if( this.getForm()!='' ){				var elements = document.forms[this.getForm()].getElementsByTagName('select');				for( var i= 0; i<elements.length; i++){					if( (elements[i].type!='checkbox') && (elements[i].type!='button') ){						_aSelect[elements[i].name] = elements[i].value; 					}				}				return _aSelect;			}			else				console.log("No Form identification..");		},		getElement:function(){			var _aElements = this.getArrayJoin();			if( _aElements ) 				return _aElements			else				return false;		}	});}/** @@ namespace of E_Ui @@ return obejct @@ **/ var Ext = (function (){ return new E_ui })();/** @@ namespace of E_Ui @@ return obejct @@ **/ var add_content_rows = function(){	try{ 		Ext.Table("table_referal").addRows(0);		}		catch(e){ alert(e); }}/** @@ namespace of E_Ui @@ return obejct @@ **/ var remove_content_rows = function(){	try{ Ext.Table("table_referal").removeRows(); }	catch(e){ alert(e); }}/** @@ namespace of E_Ui @@ return obejct @@ **/ var validasi =function(){	var s_i = Ext.Cmp('chk_rows').getChecked()	if( s_i =='') { 		alert("Please filled in the checkbox !"); return false; 	}	else{		var list = s_i.split(',');		var _tot = 0;		for(var i in list )		{			var CustomerName = Ext.Cmp("CustomerName_"+list[i]).getValue();			var CustomerPhone1 = Ext.Cmp("PhoneNumber1_"+list[i]).getValue();			var CustomerPhone2 = Ext.Cmp("PhoneNumber2_"+list[i]).getValue();			var CustomerPhone3 = Ext.Cmp("PhoneNumber3_"+list[i]).getValue();			var CustomerDob = Ext.Cmp("DOB_"+list[i]).getValue();						if( CustomerName==''){				var errno = parseInt(list[i]) + 1;				alert("Referal Name at Referal "+errno+" empty..");					Ext.Cmp("CustomerName_"+list[i]).setFocus();				return false;			}			else if( CustomerPhone1=='' && CustomerPhone2=='' && CustomerPhone3=='' ){				alert("Please input one of phone number !");					Ext.Cmp("PhoneNumber1_"+list[i]).setFocus();				return false;			}			else{				_tot++;			}			}				if( _tot > 0) return true		else			return false;	}} var saveReferal = function(){	try	{		if( validasi() )		{			if (confirm('Are you sure want to save Referal?')){				var frm_add_referal = Ext.Serialize('frm_add_referal').getElement();				var ChkBox	= Ext.Cmp('chk_rows').getChecked();				var CustomerId = Ext.Cmp('CustomerId').getValue();					doJava.File = "../class/class.save.refral.php";					doJava.Methode = "POST";					doJava.Params = {						action:'save'+Ext.Join( new Array(frm_add_referal)),						ChkBox : ChkBox, 						CustomerId: CustomerId					}					var error = doJava.eJson();						if( error.result){							alert("Success..! Referal Saved")							doJava.winew.winClose();						}							else{							alert("Failed..! Referal Failed to Save")						}			}						}	//console.log(frm_add_referal);			}	catch(e){		console.log(e);	}}var updateReferal = function(){	try	{		if( validasi() )		{			if (confirm('Are you sure want to update?')){				var frm_edit_referal = Ext.Serialize('frm_edit_referal').getElement();				var ChkBox	= Ext.Cmp('chk_rows').getChecked();											var CustomerId = Ext.Cmp('CustomerId').getValue();					doJava.File = "../class/class.save.refral.php";					doJava.Methode = "POST";					doJava.Params = {						action:'update'+Ext.Join( new Array(frm_edit_referal)),						ChkBox : ChkBox, 						CustomerId: CustomerId					}					var error = doJava.eJson();						if( error.result){							alert("Success..! Referal Updated")						}							else{							alert("Failed..! Referal Failed to Update")						}			}						}	//console.log(frm_add_referal);			}	catch(e){		console.log(e);	}}var approveReferal = function(){	try	{		if( validasi() )		{			var ChkBox	= Ext.Cmp('chk_rows').getChecked();			var list = ChkBox.split(',');			var total = 0;			for(var i in list )			{				total++;			}			if (confirm('Are you sure want to approve '+total+' Referal?')){										var CustomerId = Ext.Cmp('CustomerId').getValue();				doJava.File = "../class/class.save.refral.php";				doJava.Methode = "POST";				doJava.Params = {					action:'approve',					ChkBox : ChkBox, 					CustomerId: CustomerId				}				var error = doJava.eJson();					if( error.result){						alert("Success..! Referal Approved")						location.reload(); 					}						else{						alert("Failed..! Referal Failed to Approve")					}			}						}	//console.log(frm_add_referal);			}	catch(e){		console.log(e);	}}
var rejectReferal = function(){	try	{		if( validasi() )		{			var ChkBox	= Ext.Cmp('chk_rows').getChecked();			var list = ChkBox.split(',');			var total = 0;			for(var i in list )			{				total++;			}			if (confirm('Are you sure want to reject '+total+' Referal?')){							var CustomerId = Ext.Cmp('CustomerId').getValue();				doJava.File = "../class/class.save.refral.php";				doJava.Methode = "POST";				doJava.Params = {					action:'reject',					ChkBox : ChkBox, 					CustomerId: CustomerId				}				var error = doJava.eJson();					if( error.result){						alert("Success..! Referal Rejected")						location.reload(); 					}						else{						alert("Failed..! Referal Failed to Reject")					}			}						}	//console.log(frm_add_referal);			}	catch(e){		console.log(e);	}}var exitApproval = function(){	if( confirm('Do you want to exit from this session ?') ){		doJava.winew.winClose();	}	else{		return false;		//location.reload(); 	}}function Huruf(a) {	re = /^[A-Za-z]{1,}$/;	return re.test(a);}